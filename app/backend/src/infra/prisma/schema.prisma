generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---- 사용자 및 프로필 ----
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password_hash String
  name          String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  profile          UserProfile?
  surveyResponse   UserSurveyResponse?
  personality      UserPersonality?
  messages         Message[]
  requestedMatches Match[]             @relation("RequestedMatches") // 매칭 요청 받은 사용자
  requesterMatches Match[]             @relation("RequesterMatches") // 매칭 요청한 사용자
}

model UserProfile {
  profile_id       Int      @id @default(autoincrement())
  user_id          Int      @unique // foreign key
  introduce        String?
  age              Int
  gender           Gender
  mbti             MBTI?
  interests        String   @default("") // comma-separated interests
  province         String
  city             String
  profile_media_id Int?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  profile_image Media? @relation(fields: [profile_media_id], references: [media_id])
  user          User   @relation(fields: [user_id], references: [id])
}

// ---- 성격 데이터 ----
model UserPersonality {
  personality_id    Int      @id @default(autoincrement())
  user_id           Int      @unique // foreign key
  openness          Float
  conscientiousness Float
  extraversion      Float
  agreeableness     Float
  neuroticism       Float
  last_calculated   DateTime

  user User @relation(fields: [user_id], references: [id])
}

// ---- 설문 응답 ----
model UserSurveyResponse {
  survey_id   Int      @id @default(autoincrement())
  user_id     Int      @unique
  survey_data Json
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

// ---- 매칭 시스템 ----
model Match {
  match_id          Int         @id @default(autoincrement())
  requester_id      Int // 매칭 요청한 사용자
  requested_id      Int // 매칭 요청 받은 사용자
  requester_consent Boolean     @default(true) // 요청자는 기본적으로 동의한 상태
  requested_consent Boolean     @default(false) // 요청 받은 사용자의 동의 여부
  status            MatchStatus @default(PENDING)
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  requester     User           @relation("RequesterMatches", fields: [requester_id], references: [id])
  requested     User           @relation("RequestedMatches", fields: [requested_id], references: [id])
  conversations Conversation[]

  @@index([requester_id])
  @@index([requested_id])
}

// ---- 채팅 시스템 ----
model Conversation {
  conversation_id Int              @id @default(autoincrement())
  match_id        Int
  type            ConversationType @default(BETA_BAE)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  match    Match     @relation(fields: [match_id], references: [match_id])
  messages Message[]
}

// TODO: 사진 메시지와 일반 메시지를 구분할 것인지 확인 (like instagram dm) -> api 구현 편해질지도
model Message {
  message_id          Int       @id @default(autoincrement())
  conversation_id     Int
  sender_id           Int
  message_text        String    @db.Text
  sent_at             DateTime  @default(now())
  is_read             Boolean   @default(false)
  read_at             DateTime? // TODO: 읽은 시간인데 필요한지 확인
  attachment_media_id Int?

  conversation Conversation @relation(fields: [conversation_id], references: [conversation_id])
  sender       User         @relation(fields: [sender_id], references: [id])
  media        Media?       @relation(fields: [attachment_media_id], references: [media_id]) // TODO: 다중 미디어 지원 시 수정 필요

  @@index([conversation_id, sent_at]) // 대화 내에서 시간순 조회를 위한 인덱스
}

// ---- 미디어 관리 ----
model Media {
  media_id   Int      @id @default(autoincrement())
  file_url   String
  file_type  String
  context    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  messages     Message[]
  userProfiles UserProfile[]
}

// ---- BetaBae 프롬프트 관리 ----
model BetaBaePrompt {
  prompt_id  Int      @id @default(autoincrement())
  template   String   @db.Text
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// ---- enum 정의 ----
enum Gender {
  MALE
  FEMALE
}

enum MBTI {
  INFP
  INFJ
  INTP
  INTJ
  ISFP
  ISFJ
  ISTP
  ISTJ
  ENFP
  ENFJ
  ENTP
  ENTJ
  ESFP
  ESFJ
  ESTP
  ESTJ
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ConversationType {
  BETA_BAE
  REAL_BAE
}
