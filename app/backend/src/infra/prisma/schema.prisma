generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---- 사용자 및 프로필 ----
model User {
  user_id             Int                 @id @default(autoincrement())
  username            String              @unique
  email               String              @unique
  password_hash       String
  profile             UserProfile?
  surveyResponse      UserSurveyResponse?
  personality         UserPersonality?
  messages            Message[]
  matchParticipations MatchParticipant[]  // 참가한 모든 매칭
  initiatedMatches    Match[]             @relation("Initiator")  // 시작한 매칭
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
}

model UserProfile {
  profile_id      Int       @id @default(autoincrement())
  name            String
  bio             String?
  age             Int
  gender          String    @db.VarChar(10)
  mbti            String?   @db.VarChar(4)
  interests       Json      @default("[]")
  province        String?   @db.VarChar(20)  // TODO: change to enum  
  city            String?   @db.VarChar(20)  // TODO: change to enum
  profile_media_id Int?
  user_id         Int       @unique
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  profile_image   Media?    @relation(fields: [profile_media_id], references: [media_id])
  user            User      @relation(fields: [user_id], references: [user_id])
}

// ---- 성격 데이터 ----
model UserPersonality {
  personality_id  Int       @id @default(autoincrement())
  user_id         Int       @unique
  openness        Float
  conscientiousness Float
  extraversion    Float
  agreeableness   Float
  neuroticism     Float
  last_calculated DateTime

  user            User      @relation(fields: [user_id], references: [user_id])
}

// ---- 설문 응답 ----
model UserSurveyResponse {
  survey_id    Int     @id @default(autoincrement())
  user_id      Int     @unique
  survey_data  Json
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user         User    @relation(fields: [user_id], references: [user_id])
}

// ---- 매칭 시스템 ----
model Match {
  match_id      Int               @id @default(autoincrement())
  initiator_id  Int               // 매칭을 시작한 사용자 ID
  status        String            @default("pending") // TODO: change to enum
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt


  initiator     User              @relation("Initiator", fields: [initiator_id], references: [user_id])
  conversations Conversation[]
  participants  MatchParticipant[]
}

model MatchParticipant {
  id         Int      @id @default(autoincrement())
  match_id   Int
  user_id    Int
  consent    Boolean  @default(false)  // 사용자 동의 여부
  joined_at  DateTime @default(now())
  
  match      Match    @relation(fields: [match_id], references: [match_id])
  user       User     @relation(fields: [user_id], references: [user_id])
  
  @@unique([match_id, user_id])  // 한 매치에 한 사용자는 한 번만 참가 가능
}

// ---- 채팅 시스템 ----
model Conversation {
  conversation_id Int       @id @default(autoincrement())
  match_id        Int
  type            String    @default("betaBae")
  
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  match           Match     @relation(fields: [match_id], references: [match_id])
  messages        Message[]
}

model Message {
  message_id          Int         @id @default(autoincrement())
  conversation_id     Int
  sender_id           Int
  message_text        String      @db.Text
  sent_at             DateTime    @default(now())
  is_read             Boolean     @default(false)
  read_at             DateTime?   // 읽은 시간 추가
  attachment_media_id Int?

  conversation        Conversation @relation(fields: [conversation_id], references: [conversation_id])
  sender              User        @relation(fields: [sender_id], references: [user_id])
  media               Media?      @relation(fields: [attachment_media_id], references: [media_id])
  
  @@index([conversation_id, sent_at])  // 대화 내에서 시간순 조회를 위한 인덱스
}

// ---- 미디어 관리 ----
model Media {
  media_id     Int            @id @default(autoincrement())
  file_url     String
  file_type    String
  context      String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt

  messages     Message[]
  userProfiles UserProfile[]
}

// ---- BetaBae 프롬프트 관리 ----
model BetaBaePrompt {
  prompt_id     Int      @id @default(autoincrement())
  template      String   @db.Text
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}